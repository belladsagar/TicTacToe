{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red70\green137\blue204;\red23\green23\blue23;\red202\green202\blue202;
\red167\green197\blue152;}
{\*\expandedcolortbl;;\cssrgb\c33725\c61176\c83922;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c70980\c80784\c65882;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh16580\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs44 \cf0 Done with entry of Player1 now start with rechecking of entering the same thing \
\
\
\
constructor:\
Positions on board record need to be a zero filled array with size #9                -DONE\
	pb = [0,0,0,0,0,0,0,0,0]\
	\
	Defining the current status print of the board      -DONE\
	\
	\
\
input:\
We need to input the identity of the function                       -DONE\
\
start1 and start2:\
We need to store the positions of every entry a player makes          -DONE\
	pd = [1,2,3,0,0,0,0..]\
\
recheck1:\
We need to check the positions after every entry            -DONE\
LOGIC CHANGED:-\
	for i in pb:\
		pe1 	#this is position entered by player1\
		if (pe1 == i)\
			recall entry\
		else\
			continue\
	\
recheck2:\
We need to check the positions after every entry for player2               -DONE\
LOGIC CHANGED:-	\
for i in pb:\
		pe2 	#this is position entered by player2\
		if (pe2 == i)\
			recall entry\
		else\
			continue\
\
\
recheck() will call for display()		-DONE\
\
Write display functionalists using self.pb             -DONE\
\
p1 can any of  = 1 2 3 4 5 6 7 8 9         -DONE\
\
if p1 >= 1 and p1 <=3:\
	br[0][p1] = \'93 * \'94\
elif p1 >= 4 and p1 <=6:\
	br[1][p1] = \'93 * \'94 \
else:\
	br[2][p1] = \'93 * \'94 \
\
\
Final problem:-          \
def check():\
	pass\
\
We need to go for combinations \
#By direct combinations are not useful\
	REASON:- If the entry is 0,5,4,8 - then the combination 0,4,8 gives win but if we check \
					[0,5,4,8] != [0,4,8]\
					\
ALGORITHUM FOR CHECKING LOGIC:-           -DONE\
\pard\pardeftab720\sl580\partightenfactor0

\f1\fs38 \cf2 \cb3 \expnd0\expndtw0\kerning0
s \cf4 = [[\cf5 0\cf4 ,\cf5 1\cf4 ,\cf5 2\cf4 ],[\cf5 3\cf4 ,\cf5 4\cf4 ,\cf5 5\cf4 ],[\cf5 6\cf4 ,\cf5 7\cf4 ,\cf5 8\cf4 ],[\cf5 0\cf4 ,\cf5 3\cf4 ,\cf5 6\cf4 ],[\cf5 1\cf4 ,\cf5 4\cf4 ,\cf5 7\cf4 ],[\cf5 2\cf4 ,\cf5 5\cf4 ,\cf5 8\cf4 ],\cb1 \
\cb3         [\cf5 0\cf4 ,\cf5 4\cf4 ,\cf5 8\cf4 ],[\cf5 2\cf4 ,\cf5 4\cf4 ,\cf5 6\cf4 ]]\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs44 \cf0 \kerning1\expnd0\expndtw0 #the above are the win combinations\
s1 = [0,5,4,8]\
#So s1 has a combination with s[6]\
\
\
#c - c is the counter to check the equality\
#c1 - c1 is to pick the values inside i (where i picks the value inside s)\
\
LOGIC -1\
c = 0\
for i in s:\
	c1 = 0\
	for j in range(0, len(s1)):\
		if (s1[j] in i):\
			c = c + 1\
			c1 = c1 + 1\
		else:\
			c1 = c1+1\
	if (c == 3):\
		print(\'93Win\'94)\
	else:\
		c = 0\
\
\
\
\
\
\
\
\
\
}